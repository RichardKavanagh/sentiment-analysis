task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

subprojects {
	 
	apply plugin: 'java'
	apply plugin: 'eclipse-wtp'
	apply plugin: 'application'
	apply plugin: 'sonar-runner'
	apply plugin: 'jacoco'
	
	repositories {
		mavenCentral()
			maven {
			url "http://clojars.org/repo"
		}
	}

	uploadArchives {
		repositories {
			flatDir {
				dirs 'repos'
			}
		}
	}
	

	test {
		systemProperties 'property': 'value'
	}
	
	jacoco {
		toolVersion = "0.7.1.201405082137"
	}

	def coverageSourceDirs = [	'../app/src/main/java'	]

	jacocoTestReport {
	    reports {
	        xml.enabled false
	        csv.enabled false
	        html.destination "${buildDir}/jacocoHtml"
	    }
	}
	
	subprojects.each { subproject -> evaluationDependsOn(subproject.path)}
	
}


project(":" + rootProject.name +"-topology") {
	
	dependencies {
		compile project(":"+rootProject.name+"-classifiers")
		
		compile 'org.apache.storm:storm-core:' + stormVersion
		compile 'com.fasterxml.jackson.core:jackson-core:' + jacksonVersion
		compile 'com.fasterxml.jackson.core:jackson-databind:' + jacksonVersion
		compile 'org.twitter4j:twitter4j-core:' + tweet4jVersion
		compile 'org.twitter4j:twitter4j-stream:' + tweet4jVersion
		compile 'com.ibm.icu:icu4j:' + icu4jVersion
		compile 'com.googlecode.juniversalchardet:juniversalchardet:' + juniversalchardetVersion
		compile 'edu.stanford.nlp:stanford-corenlp:' + stanfordNLPVersion
		compile 'edu.stanford.nlp:stanford-corenlp:' + stanfordNLPVersion + '-models'
		compile 'net.sf.opencsv:opencsv:' + csvVersion
		compile 'org.elasticsearch:elasticsearch:' + elasticsearchVersionTopology
		compile 'com.google.code.gson:gson:' + gsonVersion
		
		testCompile 'junit:junit:' + junitVersion
		testCompile 'org.jmock:jmock-junit4:' + jmockVersion
		testCompile 'org.jmock:jmock-legacy:' + jmockVersion
	}
	
	
}


project(":" + rootProject.name +"-classifiers") {

	dependencies {
		compile 'org.apache.storm:storm-core:' + stormVersion
		
		compile 'com.fasterxml.jackson.core:jackson-core:' + jacksonVersion
		compile 'com.fasterxml.jackson.core:jackson-databind:' + jacksonVersion
		compile 'org.twitter4j:twitter4j-core:' + tweet4jVersion
		compile 'org.twitter4j:twitter4j-stream:' + tweet4jVersion
		compile 'com.ibm.icu:icu4j:' + icu4jVersion
		compile 'edu.stanford.nlp:stanford-corenlp:' + stanfordNLPVersion
		compile 'edu.stanford.nlp:stanford-corenlp:' + stanfordNLPVersion + '-models'
		compile 'net.sf.opencsv:opencsv:' + csvVersion
   		compile 'org.apache.mahout:mahout-core:' + mahoutVersion
   		compile 'org.elasticsearch:elasticsearch:' + elasticsearchVersionTopology
   		compile 'com.googlecode.juniversalchardet:juniversalchardet:' + juniversalchardetVersion
   		compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
   		
   		testCompile 'junit:junit:' + junitVersion
		testCompile 'org.jmock:jmock-junit4:' + jmockVersion
		testCompile 'org.jmock:jmock-legacy:' + jmockVersion
	}
	
	sonarRunner() {
		sonarProperties {
			property "sonar.host.url", "http://sonar.ianduffy.ie"
			property "sonar.projectKey", "sentiment-analysis"
			property "sonar.projectName", "sentiment-analysis"
			property "sonar.projectVersion", "V1.0"
			property "sonar.language", "java"
			property "sonar.sources", "src/main/java"
			property "sonar.binaries", "build" 
		}
	}
}

 
task allJar(type: Jar, dependsOn: subprojects.assemble) {
   zip64 = true
   baseName = applicationName
   subprojects.each { subproject -> 
      from subproject.configurations.archives.allArtifacts.files.collect {
           zipTree(it)
       }
       from subproject.configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
 }